{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundry.js","container/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","src","alt","CardList","robots","cardsArray","map","robot","i","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","marginBottom","border","borderRadius","children","ErrorBoundry","hasError","info","this","setState","Component","App","event","searchField","target","value","fetch","response","json","users","robotfilters","filter","body","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.99450090.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport 'tachyons';\r\nconst Card = ({id, name, email}) =>{\r\n    return (\r\n        <div className=\"bg-light-green tc dib br3 pa ma3 grow bw3 shadow-3 \">\r\n            <img src= {`https://robohash.org/${id}?=200x200`} alt='robots'/>\r\n\r\n            <div>\r\n                <h3 className=\"f5 ttu tracked-mega mt0\">{name}</h3>\r\n                <p className=\"i\">{email}</p>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    let cardsArray = robots.map((robot, i) =>{\r\n    return <Card key={i} id={robots[i].id}\r\n                 name={robots[i].name} \r\n                 email={robots[i].email} \r\n           />\r\n    })\r\n    return(\r\n        \r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n\r\n    return (\r\n        <div>\r\n            <input \r\n            className=\"i ba tc b-green pa3 bg-light-blue \" \r\n            type=\"search\" \r\n            placeholder=\"search your Robot\" \r\n            onChange={onSearchChange}/>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflowY: 'scroll' ,height: '800px', marginBottom: '10px', border: '1px solid black', borderRadius:'10px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError : true})\r\n    }\r\n\r\n    render(){\r\n        \r\n        if(this.state.hasError){\r\n            return <h1>Ooooops that is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../component/Scroll';\r\nimport ErrorBoundry from '../component/ErrorBoundry';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super ()\r\n        this.state = {\r\n            robots : [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots : users}));\r\n    }\r\n\r\n\r\n    onSearchChange=(event) =>{\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log(this.state.robots)\r\n        const robotfilters = this.state.robots.filter(robot =>\r\n                robot.body.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n            )\r\n            if (this.state.robots.length < 0){\r\n                return <h1>Loading</h1>        \r\n            }else{\r\n                return (\r\n                    <div className=\"tc\">\r\n                        <h1 className=\"f2\">robotfriends</h1>\r\n                        <SearchBox onSearchChange={this.onSearchChange}/>\r\n                        <Scroll>\r\n                            <ErrorBoundry>\r\n                                <CardList robots={robotfilters}/>        \r\n                            </ErrorBoundry>\r\n                        </Scroll>\r\n                    </div>\r\n                )\r\n            }\r\n        \r\n    }\r\n   \r\n\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './container/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}